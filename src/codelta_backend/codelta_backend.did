type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LogVisibility = variant {
  controllers;
  public;
  allowed_viewers : vec principal;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Topic = variant {
    Unspecified;
    NeuronManagement;
    ExchangeRate;
    NetworkEconomics;
    Governance;
    NodeAdmin;
    ParticipantManagement;
    SubnetManagement;
    NetworkCanisterManagement;
    Kyc;
    NodeProviderRewards;
    IcOsVersionDeployment;
    IcOsVersionElection;
    SnsAndCommunityFund;
    ApiBoundaryNodeManagement;
    SubnetRental;
    ProtocolCanisterManagement;
    ServiceNervousSystemManagement;
};
service : {
  check_status : (principal) -> (variant { Ok: CanisterStatusResponse; Err: text });
  check_balance : (Topic) -> (variant { Ok: text; Err: text });
  check_subaccount_hex : (Topic) -> (variant { Ok: text; Err: text });
  distribute_icp: (Topic, opt vec text) -> (variant { Ok: null; Err: text });
}
